name: SonarQube Report
on:
  workflow_dispatch:
  push:
    branches:
      - main
  workflow_run:
    workflows: ["SonarQube Analysis"]
    types:
      - completed

permissions:
  # Needed to download artifacts from previous workflow
  actions: read
  contents: read

jobs:
  report:
    name: SonarCloud Report
    runs-on: ubuntu-latest
    # Only run if the previous workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download artifacts only for workflow_run events
      - name: Download analysis package
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            })
            const matchArtifact = artifacts.data.artifacts.find((artifact) => {
              return artifact.name == "sonarqube-analysis"
            })
            if (!matchArtifact) {
              throw new Error('No SonarQube analysis artifact found')
            }
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip'
            })
            const fs = require('fs')
            fs.writeFileSync('sonarqube-analysis.zip', Buffer.from(download.data))

      # Extract the analysis package
      - name: Extract analysis package
        if: ${{ github.event_name == 'workflow_run' }}
        run: |
          unzip -q sonarqube-analysis.zip
          tar -xzf sonarqube-analysis.tar.gz

      # For direct push to main or manual runs, set up environment and run tests
      - name: Setup Node.js 20.x
        if: ${{ github.event_name != 'workflow_run' }}
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: 20.x

      - name: Install pnpm
        if: ${{ github.event_name != 'workflow_run' }}
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2

      - name: Install dependencies
        if: ${{ github.event_name != 'workflow_run' }}
        run: pnpm install --config.platform=linux --config.architecture=x64

      - name: Create .env
        if: ${{ github.event_name != 'workflow_run' }}
        run: cp .env.example .env

      - name: Generate Random ENCRYPTION_KEY, CRON_SECRET & NEXTAUTH_SECRET and fill in .env
        if: ${{ github.event_name != 'workflow_run' }}
        run: |
          RANDOM_KEY=$(openssl rand -hex 32)
          sed -i "s/ENCRYPTION_KEY=.*/ENCRYPTION_KEY=${RANDOM_KEY}/" .env
          sed -i "s/CRON_SECRET=.*/CRON_SECRET=${RANDOM_KEY}/" .env
          sed -i "s/NEXTAUTH_SECRET=.*/NEXTAUTH_SECRET=${RANDOM_KEY}/" .env

      - name: Run tests with coverage
        if: ${{ github.event_name != 'workflow_run' }}
        run: |
          cd apps/web
          pnpm test:coverage
          cd ../../
          # The Vitest coverage config is in your vite.config.mts

      # Run SonarQube scan
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@bfd4e558cda28cda6b5defafb9232d191be8c203
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }}

      # Optional: Get the Quality Gate status
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force the job to fail if Quality Gate fails
        # timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }}
